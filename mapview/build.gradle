apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'
apply plugin: 'signing'

version = VERSION_NAME
group = GROUP

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
    }
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 31
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = ['-Xjvm-default=all-compatibility']
    }
}

dependencies {
    def coroutine_version = '1.6.1'
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.4.1'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.7.3'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
}
repositories {
    mavenCentral()
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
}

ext.'signing.keyId' = System.getenv('signingKeyId')
ext.'signing.password' = System.getenv('signingPwd')
ext.'signing.secretKeyRingFile' = System.getenv('signingKeyFile')

afterEvaluate { project ->
    publishing {
        publications {
            release(MavenPublication) {

                groupId = GROUP
                artifactId = 'mapview'
                version = VERSION_NAME

                artifact bundleReleaseAar
                artifact androidSourcesJar

                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                            url = POM_DEVELOPER_URL
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                def releasesRepoUrl = System.getenv('releaseRepositoryUrl')
                def snapshotsRepoUrl = System.getenv('snapshotRepositoryUrl')
                url = !VERSION_NAME.contains("SNAPSHOT") ? releasesRepoUrl : snapshotsRepoUrl

                credentials(PasswordCredentials) {
                    username = System.getenv('NEXUS_USERNAME')
                    password = System.getenv('NEXUS_PASSWORD')
                }
            }
        }
    }

    signing {
        publishing.publications.all { publication ->
            sign publication
        }
    }
}

